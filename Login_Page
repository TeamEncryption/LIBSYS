
// All of the Java JFrame tools for creating the GUI being imported

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.HashMap;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

// Class header implements ActionListener for button functionality
public class Login_Page implements ActionListener, KeyListener{
	
	// This String will allow for the UserID entered to be sent beyond this window
	public static String userID;
	
	// The main JFrame/window creation
	JFrame LoginFrame = new JFrame("LIBSYS");
		
	// Button instances are created and labeled with text
	JButton loginButton = new JButton("Login");
	JButton resetButton = new JButton("Reset");
	JButton BackButton = new JButton("Back");
	
	// Text field for user name entry by users
	JTextField userIDfield = new JTextField();
	
	// Password field for password entry by users
	JPasswordField userPassfield = new JPasswordField();
	
	// All of the labels that hold text that communicates with the outside user using the system
	JLabel userIDlabel = new JLabel("Admin ID:");
	JLabel userPasslabel = new JLabel("Password:");
	JLabel messageLabel = new JLabel();
	JLabel libsys_Header = new JLabel("LIBSYS System");
	JLabel LineLabel = new JLabel();
	
	// Creation and assignments of the HashMap that holds the user-login information
	HashMap<String, String> logininfo = new HashMap<String, String>();
	
	// HashMap is imported into this constructor for utilization in case-sensitive login information
	Login_Page(HashMap<String, String> logininfoOriginal) {
		
		logininfo = logininfoOriginal;
		
		// +-------------------- Label placement and personalization --------------------+
		libsys_Header.setBounds(180, 10, 300, 100);
		libsys_Header.setVisible(true);
		libsys_Header.setFont(new Font(null, Font.BOLD, 30));
		
		LineLabel.setBounds(0, 75, 600, 3);
		LineLabel.setOpaque(true);
		LineLabel.setBackground(Color.BLUE);
		
		userIDlabel.setBounds(125, 150, 75, 25);
		userPasslabel.setBounds(125, 200, 75, 25);
		
		messageLabel.setBounds(200, 220, 250, 35);
		messageLabel.setFont(new Font(null, Font.ITALIC, 12));
		
		// +-------------------- Text Fields placement --------------------+
		userIDfield.setBounds(200, 150, 200, 25);
		userPassfield.setBounds(200, 200, 200, 25);
		
		// +-------------------- Button placement and personalization --------------------+
		loginButton.setBounds(200, 250, 100, 25);
		loginButton.addActionListener(this);
		loginButton.setFocusable(false);
		
		resetButton.setBounds(300, 250, 100, 25);
		resetButton.addActionListener(this);
		resetButton.setFocusable(false);
		
		BackButton.setBounds(505, 80, 75, 25);
		BackButton.addActionListener(this);
		BackButton.setFocusable(false);
		
		// +-------------------- Frame additions --------------------+
		LoginFrame.add(loginButton);
		LoginFrame.add(resetButton);
		LoginFrame.add(userIDfield);
		LoginFrame.add(userPassfield);
		LoginFrame.add(messageLabel);
		LoginFrame.add(userIDlabel);
		LoginFrame.add(userPasslabel);
		LoginFrame.add(libsys_Header);
		LoginFrame.add(LineLabel);
		LoginFrame.add(BackButton);
		
		// +-------------------- Frame placement and personalization --------------------+
		LoginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		LoginFrame.setSize(600, 400);
		LoginFrame.setResizable(false);
		LoginFrame.setLayout(null);
		LoginFrame.setVisible(true);
		LoginFrame.getRootPane().setDefaultButton(loginButton);
		
	}
	
	// +-------------------- Action Listener --------------------+
	@Override
	public void actionPerformed(ActionEvent e) {
		
		// Reset button functionality = will clear text fields for user when pressed
		if (e.getSource() == resetButton) {
			
			userIDfield.setText("");
			userPassfield.setText("");
			messageLabel.setText("");
		
		}
		
		// Login button functionality
		if (e.getSource() == loginButton) {
			
			// userID and password are taken from user input fields
			userID = userIDfield.getText();
			String password = String.valueOf(userPassfield.getPassword());
			
			// If the userID entered by the user matches what is contained in the HashMap
			if (logininfo.containsKey(userID)) {
				
				// If the password entered also matches what is contained in the HashMap = LOGIN SUCCESSFUL
				if (logininfo.get(userID).equals(password)) {
					messageLabel.setText("");
					LoginFrame.dispose();
					new Main_Menu(userID);
					
				}
				
				// If the password entered does NOT match the information contained in the HashMap = INVALID CREDENTIALS
				else {
					messageLabel.setForeground(Color.red);
					messageLabel.setText("Invalid Credentials!");
					
				}
				
			}
			
			// This message is displayed when the User name entered by the user in incorrect from the jump = User name Not Found
			else {
				messageLabel.setForeground(Color.red);
				messageLabel.setText("Username not Found");
				
			}
			
		}
		
		if (e.getSource() == BackButton) {
			new Selection_Page();
			LoginFrame.dispose();
			
		}
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_ENTER) {
			loginButton.doClick();
		}
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}
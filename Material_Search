
// +---------- Material Search ----------+
// This is where users will be able to search the library catalog for the material they wish to find, guest users are confined to this window alone

// Libraries for JAVA Swing
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.URL;
import java.util.HashMap;

import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;

// Action listener is implemented to allow functionality to buttons and combo boxes
public class Material_Search implements ActionListener{
	
	// Global variable to send the user's name to the next window opened
	public static String f_namePlate;
	
	URL f_ProfileImage = LIBSYS_launch.class.getResource("Profile Guy.png"); // Creates a reference to the other folder holding the profile image
	
	ImageIcon f_ProfileGuy = new ImageIcon(f_ProfileImage); //Image icon instance of the Profile image
	
	// the arrays are used for the combination boxes that will filter materials when a user searches for their desired material
	public static String[] f_Material = {"", "Books", "Physical Media", "Documents", "Serials", "Articles",}; // general material list
	public static String[] f_BookType = {"", "Fiction", "Non-Fiction"}; // Filter for types of books
	public static String[] f_FictionGenres = {"", "Horror", "Thriller", "Fantasy", "Sci-Fi", "Mystery", "Romance", "Humor"}; // filter for fiction book
	public static String[] f_NFictionGenres = {"", "Science", "History", "Biographical", "Art", "Music", "Cooking"}; // filter for non-fiction books
	public static String[] f_TypeSearch = {"", "Materials", "ISBN #"}; // filter for the type of search function to take place

	// JFrame creation for the main window for Material Search Page
	JFrame f_SearchPage = new JFrame("LIBSYS");
	
	URL f_LOGOImage = LIBSYS_launch.class.getResource("Encryption Logo.png"); // Creates a reference to the other folder holding the Logo image
	
	ImageIcon f_EncryptionLOGO = new ImageIcon(f_LOGOImage); //Image icon instance of the Logo image
	
	// JLabels used for the Material Search Page
	JLabel f_PageFunctionHeader = new JLabel(); // Page Function header is declared and assigned
	JLabel f_BlueLineLabel = new JLabel(); // Blue line label is declared and assigned
	JLabel f_LIBSYSLabel = new JLabel(); // LIBSYS header label is declared and assigned
	JLabel f_profilePlaceholder = new JLabel(f_ProfileGuy); // Profile placeholder box is declared and assigned
	JLabel f_username = new JLabel(); // user name label is declared and assigned
	JLabel f_InformationLabel = new JLabel(); // Search label is declared and assigned
	JLabel f_MatFilterLabel = new JLabel(); // Filter label is declared and assigned
	JLabel f_BookTypeLabel = new JLabel(); // Book type label is declared and assigned
	JLabel f_FGenreLabel = new JLabel(); // Fiction Genre Label is declared and assigned, used for filtering Fiction genres
	JLabel f_NonFGenreLabel = new JLabel(); // Non Fiction Genre label declared and assigned, used for filtering Non-Fiction genres
	JLabel f_MatTypeSearchLabel = new JLabel(); // Type search label is declared and assigned, used for filtering the type of search function used by users
	
	// JText Field used in the Material Search Page
	JTextField f_SearchField = new JTextField(); // Search Field is declared and assigned
	
	// JCombo Boxes used for filtering searches on the Material Search Page
	JComboBox f_MatTypeSearchBox = new JComboBox(f_TypeSearch); // Type search box is populated with the Types of materials used for filtering search types
	JComboBox f_MatFilterBox = new JComboBox(f_Material); // Filter Box is populated with the different types of materials used for filtering searches by users
	JComboBox f_BookTypeBox = new JComboBox(f_BookType); // Book Type box is populated with the selection between Fiction and Non-Fiction book types
	JComboBox f_FGenreBox = new JComboBox(f_FictionGenres); //  Fiction Genre box is populated with the different types of genres of Fiction books
	JComboBox f_NonFGenreBox = new JComboBox(f_NFictionGenres); // Non-Fiction genre box is populated with the different types of genres of Non-Fiction books
	
	// JButtons used for the Material search page
	JButton f_signoutButton = new JButton("Sign Out"); // Sign Out button is declared and assigned, labeled "Sign Out"
	JButton f_SearchButton = new JButton("Search Catalog"); // Search button is declared and assigned, labeled "Search Catalog"
	JButton f_BackButton = new JButton("Back"); // Back button is declared and assigned, labeled "Back"
	JButton f_ResetButton = new JButton("Reset"); // Reset button is declared and assigned
	JButton f_AddMaterialButton = new JButton("Add Material"); // AddMaterial Button is declared and assigned
	
	// Global HashMaps used for storing Catalog information coming in from the Material Database
	HashMap<String, String> f_MaterialISBN = new HashMap<String, String>();
	HashMap<String, String> f_MaterialTitle = new HashMap<String, String>();
	HashMap<String, String> f_MaterialAuthor = new HashMap<String, String>();
	HashMap<String, String> f_MaterialGenre = new HashMap<String, String>();
	HashMap<String, Integer> f_MaterialQuantity = new HashMap<String, Integer>();
	HashMap<String, String> f_MaterialType = new HashMap<String, String>();
	HashMap<String, String> f_MaterialISBNCheck = new HashMap<String, String>();
	
	// The userID is sent from the previous page to this page for the sign out label (so it looks nice and personalized), Material database information is also imported
	Material_Search(String userID, Object MatISBN, Object MatTitle, Object MatAuthor, Object MatGenre, Object MatQuant, Object MatType, Object ISBNCheck) {
		
		// Information being imported from the Client Database
		f_MaterialISBN = (HashMap) MatISBN;
		f_MaterialTitle = (HashMap) MatTitle;
		f_MaterialAuthor = (HashMap) MatAuthor;
		f_MaterialGenre = (HashMap) MatGenre;
		f_MaterialQuantity = (HashMap) MatQuant;
		f_MaterialType = (HashMap) MatType;
		f_MaterialISBNCheck = (HashMap) ISBNCheck;
		
		// The previous window's userID variable is sent through to this window for the username label 
		f_namePlate = userID;
		
		// +-------------------- Label placement and personalization --------------------+	
		f_LIBSYSLabel.setBounds(500, 0, 700, 100); // LIBSYS Label is placed and given dimensions
		f_LIBSYSLabel.setText("LIBSYS System"); // LIBSYS label has text assigned to it
		f_LIBSYSLabel.setFont(new Font(null, Font.BOLD, 35)); // LIBSYS Label is given a new font size of 35
		
		f_BlueLineLabel.setBounds(0, 70, 1280, 3); // Blue Line label is placed and given dimensions
		f_BlueLineLabel.setOpaque(true); // Blue Line label is made opaque so it is filled with color
		f_BlueLineLabel.setBackground(Color.blue); // Blue Line label is filled with the color blue
		
		f_PageFunctionHeader.setBounds(15, 50, 250, 100); // Page function label is placed and given dimensions
		f_PageFunctionHeader.setText("Catalog Search"); // Page function label has text assigned to it
		f_PageFunctionHeader.setFont(new Font(null, Font.PLAIN, 25)); // Page function label is given a new font size of 25
		
		f_profilePlaceholder.setBounds(1185, 85, 50, 50); // Profile placeholder box is placed and given dimensions
		
		f_username.setBounds(1185, 100, 100, 100); // user name label is placed and given dimensions
		f_username.setText(f_namePlate); // user name label is given text using the value of the 'nameplate' variable
		
		f_InformationLabel.setBounds(375, 250, 100, 25); // Search label is placed and given dimensions
		f_InformationLabel.setText("Information:"); // Search label has text assigned to it
		f_InformationLabel.setFont(new Font(null, Font.PLAIN, 15)); // Search label is given a new font size of 15
		
		f_MatTypeSearchLabel.setBounds(365, 300, 100, 25); // Material Type of search label is placed and given dimensions
		f_MatTypeSearchLabel.setText("Search Filter:"); // Material Type of search label has text assigned to it
		f_MatTypeSearchLabel.setFont(new Font(null, Font.PLAIN, 15)); // Material Type of search label is given a new font size of 15
		
		f_MatFilterLabel.setBounds(360, 350, 100, 25); // Filter label is placed and given dimensions
		f_MatFilterLabel.setText("Material Type:"); // Filter label has text assigned to it
		f_MatFilterLabel.setFont(new Font(null, Font.PLAIN, 15)); // Filter label is given a new font size of 15
		f_MatFilterLabel.setVisible(false); // Filter label is not visible by default
		
		f_BookTypeLabel.setBounds(375, 400, 100, 25); // Book Type label is placed an given dimensions
		f_BookTypeLabel.setText("Book Type:"); // Book Type label has text assigned to it
		f_BookTypeLabel.setFont(new Font(null, Font.PLAIN, 15)); // Book Type label is given a new font size of 15
		f_BookTypeLabel.setVisible(false); // Book Type label is not visible by default
		
		f_FGenreLabel.setBounds(405, 450, 100, 25); // Fiction Genre label is placed and given dimensions
		f_FGenreLabel.setText("Genre:"); // Fiction genre has text assigned to it
		f_FGenreLabel.setFont(new Font(null, Font.PLAIN, 15)); // Fiction Genre is given a new font size of 15
		f_FGenreLabel.setVisible(false); // Fiction Genre label is not visible by default
		
		f_NonFGenreLabel.setBounds(405, 450, 100, 25); // Non fiction genre label is placed and given dimensions
		f_NonFGenreLabel.setText("Genre:"); // Non fiction genre label has text assigned to it
		f_NonFGenreLabel.setFont(new Font(null, Font.PLAIN, 15)); // Non fiction genre label is given a new font size of 15
		f_NonFGenreLabel.setVisible(false); // Non fiction genre label is not visible by default
		
		// +-------------------- Text Fields placement and dimensions --------------------+
		f_SearchField.setBounds(475, 250, 250, 25); // Search field is placed and given dimensions
		
		// +-------------------- Combo Box Placement and Personalization --------------------+
		f_MatTypeSearchBox.setBounds(475, 300, 150, 25); // Material Type search box is placed and given dimensions
		f_MatTypeSearchBox.addActionListener(this); // Material Type search 
		
		f_MatFilterBox.setBounds(475, 350, 150, 25); // filter box is placed and given dimensions
		f_MatFilterBox.addActionListener(this); // adds action listener to filter box to give it functionality
		f_MatFilterBox.setVisible(false); // Filter box is not visible by default
		
		f_BookTypeBox.setBounds(475, 400, 150, 25); // Book Type box is placed and given dimensions
		f_BookTypeBox.addActionListener(this); // adds action listener to Book Type box to give it functionality
		f_BookTypeBox.setVisible(false); // Book Type box is not visible by default
		
		f_FGenreBox.setBounds(475, 450, 150, 25); // Fiction genre box is placed and given dimensions
		f_FGenreBox.addActionListener(this); // adds action listener to Fiction genre box to add functionality
		f_FGenreBox.setVisible(false); // Fiction genre box is not visible by default
		
		f_NonFGenreBox.setBounds(475, 450, 150, 25); // Non Fiction genre box is placed and given dimensions
		f_NonFGenreBox.addActionListener(this); // adds action listener to Non Fiction genre box to give it functionality
		f_NonFGenreBox.setVisible(false); // Non Fiction genre box is not visible by default
		
		// +-------------------- Button placement and personalization --------------------+
		f_signoutButton.setBounds(1160, 160, 100, 25); // sign out button is placed and given dimensions
		f_signoutButton.addActionListener(this); // adds action listener to the Sign Out button to give it functionality
		f_signoutButton.setFocusable(false); // disables box outline around button text
		f_signoutButton.setFont(new Font(null, Font.PLAIN, 10)); // Sign Out button is given a new font size of 10
		f_signoutButton.setForeground(Color.BLUE); // Sign Out Button text is given a blue font color
		f_signoutButton.setBorder(BorderFactory.createEmptyBorder()); // The border around the Sign Out button is taken away
		f_signoutButton.setContentAreaFilled(false); // the standard blue hue to the Sign Out button is taken away
		
		f_SearchButton.setBounds(750, 250, 175, 25); // Search button is placed and given dimensions
		f_SearchButton.addActionListener(this); // adds action listener to Search Button to give it functionality
		f_SearchButton.setFocusable(false); // disables box outline around button text
		
		f_AddMaterialButton.setBounds(750, 350, 175, 25); // AddMaterial button is placed and given dimensions
		f_AddMaterialButton.addActionListener(this); // adds action listener to Search Button to give it functionality
		f_AddMaterialButton.setFocusable(false); // disables box outline around button text
		f_AddMaterialButton.setEnabled(false); // Sets the button invisible when the page is created
		
		// Disables the ability to go back to the main menu as a Guest user, Guest12 is the hard-coded default Guest user name
		if (f_namePlate.equals("Guest12")) {
			f_BackButton.setVisible(false); // makes the button invisible
			f_AddMaterialButton.setVisible(false); // makes the button invisible
			f_ResetButton.setBounds(750, 300, 100, 25); // Reset button is placed and given dimensions specified for guest users
			f_ResetButton.addActionListener(this); // adds action listener to Reset button to give it functionality
			f_ResetButton.setFocusable(false); // disables box outline around button text

		}
		
		// Any user logged in will see the Back Button and Reset Button, unlike guest users
		else {
			f_BackButton.setBounds(750, 300, 100, 25); // Back button is placed and given dimensions
			f_BackButton.addActionListener(this); // adds action listener to Back button to give it functionality
			f_BackButton.setFocusable(false); // disables box outline around button text
			
			f_ResetButton.setBounds(850, 300, 100, 25); // Reset button is placed and given dimensions
			f_ResetButton.addActionListener(this); // adds action listener to Reset button to give it functionality
			f_ResetButton.setFocusable(false); // disables box outline around button text
			
		}
		
		// +-------------------- Frame additions and functionality --------------------+
		f_SearchPage.add(f_LIBSYSLabel); // LIBSYS header label is added to window
		f_SearchPage.add(f_BlueLineLabel); // Blue Line is added to the window
		f_SearchPage.add(f_PageFunctionHeader); // Page Function header is added to the window
		f_SearchPage.add(f_profilePlaceholder); // Profile placeholder box is added to the window
		f_SearchPage.add(f_username); // user name label is added to the window
		f_SearchPage.add(f_signoutButton); // Sign Out button is added to the window
		f_SearchPage.add(f_InformationLabel); // Information Label is added to the window 
		f_SearchPage.add(f_SearchField); // Search text field is added to the window
		f_SearchPage.add(f_MatTypeSearchLabel); // Material Type search label is added to the window
		f_SearchPage.add(f_MatTypeSearchBox); // Material Type Search box is added to the window
		f_SearchPage.add(f_SearchButton); // Search button is added to the window
		f_SearchPage.add(f_BackButton); // Back button is added to the window
		f_SearchPage.add(f_ResetButton); // Reset Button is added to the window
		f_SearchPage.add(f_AddMaterialButton); // AddMaterial Button is added to the window
		f_SearchPage.add(f_MatFilterLabel); // Material Filter Label is added to the window
		f_SearchPage.add(f_MatFilterBox); // Material Filter box is added to the window
		f_SearchPage.add(f_BookTypeBox); // Book type box is added to the window
		f_SearchPage.add(f_BookTypeLabel); // Book type label is added to the window
		f_SearchPage.add(f_FGenreBox); // Fiction genre box is added to the window
		f_SearchPage.add(f_FGenreLabel); // Fiction genre label is added to the window
		f_SearchPage.add(f_NonFGenreBox); // Non Fiction genre box is added to the window
		f_SearchPage.add(f_NonFGenreLabel); // Non fiction genre label is added to the window
		
		// +-------------------- Frame dimensions and personalization --------------------+
		f_SearchPage.setSize(1280, 720); // dimensions are given to the window
		f_SearchPage.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // application is halted when window is closed
		f_SearchPage.setLayout(null); // no layout is specified, everything is placed manually
		f_SearchPage.setResizable(false); // disables ability to resize windows
		f_SearchPage.setVisible(true); // window is made visible for users to see
		f_SearchPage.getRootPane().setDefaultButton(f_SearchButton); // allows users to press ENTER to search instead of clicking the button
		f_SearchPage.setIconImage(f_EncryptionLOGO.getImage()); // Image Icon is used to set the window/application image
		
	}

	// +-------------------- Action Listener --------------------+
	@Override
	public void actionPerformed(ActionEvent e) {
		
		int material, bookType, searchType; // Variables used to toggle the visibility of certain filter functions on the Material Search Page
		material = 0;
		bookType = 0;
		searchType = 0;
		
		// When the Sign Out button is pressed, the current page is closed and you are returned to the Selection Page
		if (e.getSource() == f_signoutButton) {
			f_SearchPage.dispose(); // current page is closed
			new Selection_Page(); // new Selection Page is created
		}
		
		// The back button will send the user back to the main menu page
		if (e.getSource() == f_BackButton) {
			f_SearchPage.dispose(); // Current page is closed
			new Main_Menu(f_namePlate); // Craetes new Main Menu and passes the Username/namePlate into it for profile personalization
		}
		
		// The Reset Button resets the Text field to display nothing and sets the Material Type box back to the default index
		if (e.getSource() == f_ResetButton) {
			f_SearchField.setText("");
			f_MatTypeSearchBox.setSelectedIndex(0);
			
		}
		
		// This if-else tree will toggle certain combo boxes to become visible based on indexes chosen for filtering a user's search
		if (e.getSource() == f_MatTypeSearchBox) {
			searchType = f_MatTypeSearchBox.getSelectedIndex();
			
			// When the 'Materials' filter is chosen, the Filter box and Filter label will then display to further filter materials to search
			if (searchType == 1) {
				f_InformationLabel.setBounds(366, 250, 100, 25);
				f_InformationLabel.setText("Material Title:");
				f_MatFilterBox.setVisible(true);
				f_MatFilterLabel.setVisible(true);
			}
			
			// When the 'Materials' selection is not chosen, all Combo box values below the Material Type
			// box will revert to index 0 and all combo boxes and labels will become invisible once again
			else if (searchType == 2) {
				f_InformationLabel.setBounds(401, 250, 100, 25);
				f_InformationLabel.setText("ISBN #:");
				f_MatFilterBox.setVisible(false);
				f_MatFilterLabel.setVisible(false);
				f_BookTypeBox.setVisible(false);
				f_BookTypeLabel.setVisible(false);
				f_FGenreBox.setVisible(false);
				f_FGenreLabel.setVisible(false);
				searchType = 0;
				bookType = 0;
				material = 0;
				f_MatFilterBox.setSelectedIndex(0);
				f_BookTypeBox.setSelectedIndex(0);
				f_FGenreBox.setSelectedIndex(0);
				f_NonFGenreBox.setSelectedIndex(0);
				
			}
			
			// When the 'Materials' selection is not chosen, all Combo box values below the Material Type
			// box will revert to index 0 and all combo boxes and labels will become invisible once again
			else {
				f_InformationLabel.setBounds(375, 250, 100, 25);
				f_InformationLabel.setText("Information:");
				f_MatFilterBox.setVisible(false);
				f_MatFilterLabel.setVisible(false);
				f_BookTypeBox.setVisible(false);
				f_BookTypeLabel.setVisible(false);
				f_FGenreBox.setVisible(false);
				f_FGenreLabel.setVisible(false);
				searchType = 0;
				bookType = 0;
				material = 0;
				f_MatFilterBox.setSelectedIndex(0);
				f_BookTypeBox.setSelectedIndex(0);
				f_FGenreBox.setSelectedIndex(0);
				f_NonFGenreBox.setSelectedIndex(0);
				
			}
		}
		
		if (e.getSource() == f_MatFilterBox) {
			material = f_MatFilterBox.getSelectedIndex();
			
			// When the 'Books' filter is chosen, the Book Type box and Book Type label will then display to further filter Books to search
			if (material == 1) {
				f_BookTypeBox.setVisible(true);
				f_BookTypeLabel.setVisible(true);				
			}
			
			// When the 'Books' selection is not chosen, all Combo box values below the Book Type
			// box will revert to index 0 and all combo boxes and labels will become invisible once again
			else {
				f_BookTypeBox.setVisible(false);
				f_BookTypeLabel.setVisible(false);
				f_FGenreBox.setVisible(false);
				f_FGenreLabel.setVisible(false);
				bookType = 0;
				material = 0;
				f_BookTypeBox.setSelectedIndex(0);
				f_FGenreBox.setSelectedIndex(0);
				f_NonFGenreBox.setSelectedIndex(0);
			}
		}
		
		
		if (e.getSource() == f_BookTypeBox) {
			bookType = f_BookTypeBox.getSelectedIndex();
			
			// When the 'Fiction' filter is chosen: Fiction Genre box and Genre label will then display to further filter Fiction Books to search
			if (bookType == 1) {
				f_FGenreBox.setVisible(true); // Fiction Genre box is visible to display Non-Fiction Genres
				f_FGenreLabel.setVisible(true); // Fiction Label is visible again
				f_NonFGenreBox.setSelectedIndex(0); // Non-Fiction genre index is set back to 0 so search function does not get confused
				f_NonFGenreBox.setVisible(false); // Non-Fiction Genre Box is hidden again
				f_NonFGenreLabel.setVisible(false); // Non-Fiction Genre label is hidden again
			}
			
			// When the 'Non-Fiction' filter is chosen: Non-Fiction Genre box and Genre label will then display to further filter Non-Fiction Books to search
			else if (bookType == 2) {
				f_NonFGenreBox.setVisible(true); // Non-Fiction Genre box is visible to display Non-Fiction Genres
				f_NonFGenreLabel.setVisible(true); // Non-Fiction Label is visible again
				f_FGenreBox.setSelectedIndex(0); // Fiction genre index is set back to 0 so search function does not get confused
				f_FGenreBox.setVisible(false); // Fiction Genre Box is hidden again
				f_FGenreLabel.setVisible(false); // Fiction Genre label is hidden again
			}
			
			// When the 'Book Type' selection is not chosen, the Genre box will revert to index 0
			else {
				f_FGenreBox.setVisible(false); // Fiction Genre Box is hidden again
				f_FGenreLabel.setVisible(false); // Fiction Genre label is hidden again
				f_FGenreBox.setSelectedIndex(0); // Fiction genre index is set back to 0 so search function does not get confused
				f_NonFGenreBox.setSelectedIndex(0); // Non-Fiction genre index is set back to 0 so search function does not get confused
				f_NonFGenreBox.setVisible(false); // Non-Fiction Genre Box is hidden again
				f_NonFGenreLabel.setVisible(false); // Non-Fiction Genre label is hidden again
			}
		
		}
		
		// This function is used for searching a particular material within the library catalog
		if (e.getSource() == f_SearchButton) {
			
			// Variables used to store material information specified for search within the Material Database
			String isbn;
			String title;
			String author;
			String genre;
			String type;
			int quantity;
			String Search = f_SearchField.getText();
			searchType = f_MatTypeSearchBox.getSelectedIndex();
			material = f_MatFilterBox.getSelectedIndex();
			bookType = f_BookTypeBox.getSelectedIndex();
			
			// User did not select a filter
			if (searchType == 0) {
				System.out.println("Please select a Search Filter");
				
			}
			
			// User did not select a material type
			else if (searchType == 1 && material == 0) {
				System.out.println("Please select a material type");
				
			}
			
			else if (searchType == 1 && material > 0) {
				
				// User did not specify the type of book to be searched
				if (material == 1 && bookType == 0) {
					System.out.println("Please select a type of book");
					
				}
				
				// User did not specify a Fiction genre when searching for a book
				else if (material == 1 && bookType == 1 && f_FGenreBox.getSelectedIndex() == 0) {
					System.out.println("Please select a genre");
					
				}
				
				// User did not specify a Non-Fiction genre when searching for a book
				else if (material == 1 && bookType == 2 && f_NonFGenreBox.getSelectedIndex() == 0) {
					System.out.println("Please select a genre");
					
				}
				
				// User has not specified the title of a book
				else if (material == 1 && Search.equals("") && bookType == 1 && f_FGenreBox.getSelectedIndex() > 0) {
					System.out.println("Please enter the title of a " + f_BookTypeBox.getSelectedItem() + " book ");
					
				}
				
				// User has not specified the title of a book
				else if (material == 1 && Search.equals("") && bookType == 2 && f_NonFGenreBox.getSelectedIndex() > 0) {
					System.out.println("Please enter the title of a " + f_BookTypeBox.getSelectedItem() + " book ");
					
				}
				
				// SEARCHING via Fiction Books - Title, Material Type, and Material Genre must match!
				else if (material == 1 && !Search.equals("") && bookType == 1 && f_FGenreBox.getSelectedIndex() > 0) {
					System.out.println("Searching for the " + f_BookTypeBox.getSelectedItem() + " book '" + Search + "' in the " + f_FGenreBox.getSelectedItem() + " section");
					if (f_MaterialTitle.containsKey(Search) && f_MaterialType.get(Search).equals("Fiction Book") && f_MaterialGenre.get(Search).equals(f_FGenreBox.getSelectedItem())) {
						title = f_MaterialTitle.get(Search); // Text field is used as reference for searching database for proper key
						isbn = f_MaterialISBN.get(title); // Title is found, and used to find the ISBN number
						author = f_MaterialAuthor.get(isbn); // ISBN is used to find the Author
						genre = f_MaterialGenre.get(isbn); // ISBN is used to find the Genre
						type = f_MaterialType.get(isbn); // ISBN is used to find the Material Type
						quantity = f_MaterialQuantity.get(isbn); // ISBN is used to find the Quantity
						
						// !!!!!!!!!!!!!!!!!!! PLACEHOLDER !!!!!!!!!!!!!!!!!!!!!!!
						System.out.println("FOUND");
						System.out.println("");
						System.out.println("ISBN: " + isbn);
						System.out.println("Title: " + title);
						System.out.println("Author: " + author);
						System.out.println("Genre: " + genre);
						System.out.println("Material Type: " + type);
						System.out.println("Quantity: " + quantity);
						// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
						
						f_AddMaterialButton.setEnabled(false); // AddMaterial button is disabled
						new Material_Page(f_namePlate, isbn, title, author, genre, type, quantity, // New Material Page is created and Client Database is imported
								Client_Database.getClientFirstName(),Client_Database.getClientLastName(),
								Client_Database.getClientEmail(), Client_Database.getClientPhone(),
								Client_Database.getClientFNEmail(), Client_Database.getClientFNPhone());
						f_SearchPage.dispose(); // Current page is closed
					}
					
					// Book was not found
					else {
						System.out.println("NOT FOUND");
						f_AddMaterialButton.setEnabled(true);
					}
					
				}
				
				// SEARCHING via Non-Fiction Books - Title, Material Type, and Material Genre must match!
				else if (material == 1 && !Search.equals("") && bookType == 2 && f_NonFGenreBox.getSelectedIndex() > 0) {
					System.out.println("Searching for the " + f_BookTypeBox.getSelectedItem() + " book '" + Search + "' in the " + f_NonFGenreBox.getSelectedItem() + " section");
					if (f_MaterialTitle.containsKey(Search) && f_MaterialType.get(Search).equals("Non-Fiction Book") && f_MaterialGenre.get(Search).equals(f_NonFGenreBox.getSelectedItem())) {
						title = f_MaterialTitle.get(Search); // Text field is used as reference for searching database for proper key
						isbn = f_MaterialISBN.get(title); // Title is found, and used to find the ISBN number
						author = f_MaterialAuthor.get(isbn); // ISBN is used to find the Author
						genre = f_MaterialGenre.get(isbn); // ISBN is used to find the Genre
						type = f_MaterialType.get(isbn); // ISBN is used to find the Material Type
						quantity = f_MaterialQuantity.get(isbn); // ISBN is used to find the Quantity
						
						// !!!!!!!!!!!!!!!!!!! PLACEHOLDER !!!!!!!!!!!!!!!!!!!!!!!
						System.out.println("FOUND");
						System.out.println("");
						System.out.println("ISBN: " + isbn);
						System.out.println("Title: " + title);
						System.out.println("Author: " + author);
						System.out.println("Genre: " + genre);
						System.out.println("Material Type: " + type);
						System.out.println("Quantity: " + quantity);
						// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
						
						f_AddMaterialButton.setEnabled(false); // AddMaterial button is disabled
						new Material_Page(f_namePlate, isbn, title, author, genre, type, quantity, // New Material Page is created and Client Database is imported
								Client_Database.getClientFirstName(),Client_Database.getClientLastName(),
								Client_Database.getClientEmail(), Client_Database.getClientPhone(),
								Client_Database.getClientFNEmail(), Client_Database.getClientFNPhone());
						f_SearchPage.dispose(); // Current page is closed
					}
					
					// Book was not found
					else {
						System.out.println("NOT FOUND");
						f_AddMaterialButton.setEnabled(true);
					}
				}
				
				// User did not type in a title for a physical media
				else if (material == 2 && Search.equals("")) {
					System.out.println("Please enter the title of a physical media");
					
				}
				
				//SEARCHING via Physical Media - Title and Material Type must match!
				else if (material == 2 && !Search.equals("")) {
					System.out.println("Searching for '" + Search + "' in the physical media");
					if (f_MaterialTitle.containsKey(Search) && f_MaterialType.get(Search).equals("Physical Media")) {
						title = f_MaterialTitle.get(Search); // Text field is used as reference for searching database for proper key
						isbn = f_MaterialISBN.get(title); // Title is found, and used to find the ISBN number
						author = f_MaterialAuthor.get(isbn); // ISBN is used to find the Author
						genre = f_MaterialGenre.get(isbn); // ISBN is used to find the Genre
						type = f_MaterialType.get(isbn); // ISBN is used to find the Material Type
						quantity = f_MaterialQuantity.get(isbn); // ISBN is used to find the Quantity
						
						// !!!!!!!!!!!!!!!!!!! PLACEHOLDER !!!!!!!!!!!!!!!!!!!!!!!
						System.out.println("FOUND");
						System.out.println("");
						System.out.println("ISBN: " + isbn);
						System.out.println("Title: " + title);
						System.out.println("Author: " + author);
						System.out.println("Genre: " + genre);
						System.out.println("Material Type: " + type);
						System.out.println("Quantity: " + quantity);
						// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
						
						f_AddMaterialButton.setEnabled(false); // AddMaterial button is disabled
						new Material_Page(f_namePlate, isbn, title, author, genre, type, quantity, // New Material Page is created and Client Database is imported
								Client_Database.getClientFirstName(),Client_Database.getClientLastName(),
								Client_Database.getClientEmail(), Client_Database.getClientPhone(),
								Client_Database.getClientFNEmail(), Client_Database.getClientFNPhone());
						f_SearchPage.dispose(); // Current page is closed
					}
					
					// Physical Media was not found
					else {
						System.out.println("NOT FOUND");
						f_AddMaterialButton.setEnabled(true);
					}
					
				}
				
				// User did not specify the title of a document
				else if (material == 3 && Search.equals("")) {
					System.out.println("Please enter the title of a document");
					
				}
				
				//SEARCHING via Documents - Title and Material Type must match!
				else if (material == 3 && !Search.equals("")) {
					System.out.println("Searching for '" + Search + "' in the documents");
					if (f_MaterialTitle.containsKey(Search) && f_MaterialType.get(Search).equals("Documents")) {
						title = f_MaterialTitle.get(Search); // Text field is used as reference for searching database for proper key
						isbn = f_MaterialISBN.get(title); // Title is found, and used to find the ISBN number
						author = f_MaterialAuthor.get(isbn); // ISBN is used to find the Author
						genre = f_MaterialGenre.get(isbn); // ISBN is used to find the Genre
						type = f_MaterialType.get(isbn); // ISBN is used to find the Material Type
						quantity = f_MaterialQuantity.get(isbn); // ISBN is used to find the Quantity
						
						// !!!!!!!!!!!!!!!!!!! PLACEHOLDER !!!!!!!!!!!!!!!!!!!!!!!
						System.out.println("FOUND");
						System.out.println("");
						System.out.println("ISBN: " + isbn);
						System.out.println("Title: " + title);
						System.out.println("Author: " + author);
						System.out.println("Genre: " + genre);
						System.out.println("Material Type: " + type);
						System.out.println("Quantity: " + quantity);
						// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
						
						f_AddMaterialButton.setEnabled(false); // AddMaterial button is disabled
						new Material_Page(f_namePlate, isbn, title, author, genre, type, quantity, // New Material Page is created and Client Database is imported
								Client_Database.getClientFirstName(),Client_Database.getClientLastName(),
								Client_Database.getClientEmail(), Client_Database.getClientPhone(),
								Client_Database.getClientFNEmail(), Client_Database.getClientFNPhone());
						f_SearchPage.dispose(); // Current page is closed
					}
					
					// Document not found
					else {
						System.out.println("NOT FOUND");
						f_AddMaterialButton.setEnabled(true);
					}
					
				}
				
				// User did not enter in a title of a Serialization
				else if (material == 4 && Search.equals("")) {
					System.out.println("Please enter the title of a serial");
					
				}
				
				//SEARCHING via Serials - Title and Material Type must match!
				else if (material == 4 && !Search.equals("")) {
					System.out.println("Searching for '" + Search + "' in the serials");
					if (f_MaterialTitle.containsKey(Search) && f_MaterialType.get(Search).equals("Serials")) {
						title = f_MaterialTitle.get(Search); // Text field is used as reference for searching database for proper key
						isbn = f_MaterialISBN.get(title); // Title is found, and used to find the ISBN number
						author = f_MaterialAuthor.get(isbn); // ISBN is used to find the Author
						genre = f_MaterialGenre.get(isbn); // ISBN is used to find the Genre
						type = f_MaterialType.get(isbn); // ISBN is used to find the Material Type
						quantity = f_MaterialQuantity.get(isbn); // ISBN is used to find the Quantity
						
						// !!!!!!!!!!!!!!!!!!! PLACEHOLDER !!!!!!!!!!!!!!!!!!!!!!!
						System.out.println("FOUND");
						System.out.println("");
						System.out.println("ISBN: " + isbn);
						System.out.println("Title: " + title);
						System.out.println("Author: " + author);
						System.out.println("Genre: " + genre);
						System.out.println("Material Type: " + type);
						System.out.println("Quantity: " + quantity);
						// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
						
						f_AddMaterialButton.setEnabled(false); // AddMaterial button is disabled
						new Material_Page(f_namePlate, isbn, title, author, genre, type, quantity, // New Material Page is created and Client Database is imported
								Client_Database.getClientFirstName(),Client_Database.getClientLastName(),
								Client_Database.getClientEmail(), Client_Database.getClientPhone(),
								Client_Database.getClientFNEmail(), Client_Database.getClientFNPhone());
						f_SearchPage.dispose(); // Current page is closed
					}
					
					// Serial not found
					else {
						System.out.println("NOT FOUND");
						f_AddMaterialButton.setEnabled(true);
					}
					
				}
				
				 // User did not specify a title of an Article
				else if (material == 5 && Search.equals("")) {
					System.out.println("Please enter the title of an article");
					
				}
				
				//SEARCHING via Articles - Title and Material Type must match!
				else if (material == 5 && !Search.equals("")) {
					System.out.println("Searching for '" + Search + "' in the articles");
					if (f_MaterialTitle.containsKey(Search) && f_MaterialType.get(Search).equals("Articles")) {
						title = f_MaterialTitle.get(Search); // Text field is used as reference for searching database for proper key
						isbn = f_MaterialISBN.get(title); // Title is found, and used to find the ISBN number
						author = f_MaterialAuthor.get(isbn); // ISBN is used to find the Author
						genre = f_MaterialGenre.get(isbn); // ISBN is used to find the Genre
						type = f_MaterialType.get(isbn); // ISBN is used to find the Material Type
						quantity = f_MaterialQuantity.get(isbn); // ISBN is used to find the Quantity
						
						// !!!!!!!!!!!!!!!!!!! PLACEHOLDER !!!!!!!!!!!!!!!!!!!!!!!
						System.out.println("FOUND");
						System.out.println("");
						System.out.println("ISBN: " + isbn);
						System.out.println("Title: " + title);
						System.out.println("Author: " + author);
						System.out.println("Genre: " + genre);
						System.out.println("Material Type: " + type);
						System.out.println("Quantity: " + quantity);
						// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
						
						f_AddMaterialButton.setEnabled(false); // AddMaterial button is disabled
						new Material_Page(f_namePlate, isbn, title, author, genre, type, quantity, // New Material Page is created and Client Database is imported
								Client_Database.getClientFirstName(),Client_Database.getClientLastName(),
								Client_Database.getClientEmail(), Client_Database.getClientPhone(),
								Client_Database.getClientFNEmail(), Client_Database.getClientFNPhone());
						f_SearchPage.dispose(); // Current page is closed
					}
					
					// Article not found
					else {
						System.out.println("NOT FOUND");
						f_AddMaterialButton.setEnabled(true);
					}
					
				}
				
			}
			
			// User did not specify the ISBN of a particular material
			else if (searchType == 2 && Search.equals("")) {
				System.out.println("Please enter an ISBN # to search the catalog");
				
			}
			
			//SEARCHING via ISBN #
			else if (searchType == 2 && !Search.equals("")) {
				System.out.println("Searching for ISBN #: " + Search);
				if (f_MaterialISBNCheck.containsKey(Search)) {
					isbn = f_MaterialISBN.get(Search); // Text field is used as reference for searching database for proper key
					title = f_MaterialTitle.get(isbn);  // ISBN is found, and used to find the Title
					author = f_MaterialAuthor.get(isbn); // ISBN is used to find the Author
					genre = f_MaterialGenre.get(isbn); // ISBN is used to find the Genre
					type = f_MaterialType.get(isbn); // ISBN is used to find the Material Type
					quantity = f_MaterialQuantity.get(isbn); // ISBN is used to find the Quantity
					
					// !!!!!!!!!!!!!!!!!!! PLACEHOLDER !!!!!!!!!!!!!!!!!!!!!!!
					System.out.println("FOUND");
					System.out.println("");
					System.out.println("ISBN: " + isbn);
					System.out.println("Title: " + title);
					System.out.println("Author: " + author);
					System.out.println("Genre: " + genre);
					System.out.println("Material Type: " + type);
					System.out.println("Quantity: " + quantity);
					// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
					
					f_AddMaterialButton.setEnabled(false); // AddMaterial button is disabled
					new Material_Page(f_namePlate, isbn, title, author, genre, type, quantity, // New Material Page is created and Client Database is imported
							Client_Database.getClientFirstName(),Client_Database.getClientLastName(),
							Client_Database.getClientEmail(), Client_Database.getClientPhone(),
							Client_Database.getClientFNEmail(), Client_Database.getClientFNPhone());
					f_SearchPage.dispose(); // Current page is closed
				}
				
				// ISBN search did not yield a material
				else {
					System.out.println("NOT FOUND");
					f_AddMaterialButton.setEnabled(true); // AddMaterial button is enabled
				}
				
			}
			
		}

	}

}